<?php

/**
 * Implements hook_menu().
 */
function dreditor_org_deploy_menu() {
  $items['admin/dreditor'] = array(
    'title' => 'Dreditor.org',
    'description' => 'Configure settings for Dreditor.org',
    'access arguments' => array('access administration pages'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/dreditor/github'] = array(
    'title' => 'GitHub Integration',
    'description' => 'Configure various GitHub settings used to integrate Dreditor.org.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dreditor_org_deploy_github_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dreditor_org_deploy.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_cronapi().
 */
function dreditor_org_deploy_cronapi($op, $job = NULL) {

  $items['dreditor_org_deploy_fetch_pull_requests'] = array(
    'description' => 'Fetch pull requests',
    'rule' => '* 0 * * *',
    'callback' => 'dreditor_org_pulls',
    'arguments' => array(TRUE),
  );

  return $items;
}

/**
 * Helper function to wrap GitHub API requests with an access token.
 */
function _github_api($path, $options = array()) {
  $request = drupal_http_request('https://api.github.com' . $path . '?access_token=' . variable_get('dreditor_org_github_access_token', ''), $options);
  return drupal_json_decode($request->data);
}

/**
 * Pull requests for dreditor/dreditor on GitHub.
 *
 * @param bool $fetch
 *   Fetch from GitHub.
 *
 * @return array
 *   A index array of pull requests.
 */
function dreditor_org_pulls($fetch = FALSE) {
  $pulls = &drupal_static(__FUNCTION__);
  if ($fetch || !isset($pulls)) {
    if (($cache = cache_get('dreditor_org_pulls')) && !$fetch) {
      $pulls = $cache->data;
    }
    else {
      $pulls = _github_api('/repos/dreditor/dreditor/pulls');
      cache_set('dreditor_org_pulls', $pulls);
    }
  }
  return $pulls;
}

/**
 * Hook fired when a payload is received from a GitHub Service hook.
 *
 * @param array $payload
 *   The parsed JSON that was sent by GitHub.
 * @param array &$response
 *   An array containing the JSON response returned to the server that invoked
 *   the webhook. The array is structured as follows:
 *   - status: Either "ok" or "error".
 *   - messages: An array of messages describing what happened.
 *   - ...: Any additional data that you want to pass to the invoking server.
 * @param array $args
 *   The arguments that are passed through wildcards in the path.
 *
 * @see github_webhook_payload()
 * @see https://help.github.com/articles/post-receive-hooks
 */
function dreditor_org_deploy_github_webhook_event(array $payload, array &$response, array $args) {
  object_log('payload', $payload);
  if (!empty($payload['repository']['name'])) {
    // Tag detection.
    if (preg_match('/^refs\/tags\/(.*)/', $payload['ref'], $matches)) {
      $values = array(
        '@name' => $payload['repository']['name'],
        '@tag' => $matches[1],
      );
      if ($payload['created']) {
        watchdog('github_webhook', 'A new tag was created on the "@name" repository: @tag', $values);
      }
      elseif ($payload['deleted']) {
        watchdog('github_webhook', 'An existing tag was deleted on the "@name" repository: @tag', $values);
      }
    }

    // Process repository specific payloads.
    if ($payload['repository']['name'] === 'dreditor.org') {
      $enable = array();
      foreach ($payload['commits'] as $commit) {
        // Skip revert commits.
        if (strpos(drupal_strtolower($commit['message']), 'revert') !== FALSE) {
          continue;
        }
        // Parse commit messages for enabling/disabling of modules/themes.
        if (preg_match_all('/(dis|en)abled? (module|theme)s?:?(.+)/i', $commit['message'], $matches, PREG_SET_ORDER)) {
          foreach ($matches as $match) {
            $extensions = explode(',', str_replace(' ', '', $match[3]));
            $function = $match[2] . '_' . $match[1] . 'able';
            // Save enables for later, until after the repository has been
            // pulled.
            if (drupal_strtolower($match[1]) === 'en') {
              foreach ($extensions as $extension) {
                if (empty($enable[$function][$extension])) {
                  $enable[$function][$extension] = $extension;
                }
              }
            }
            else {
              call_user_func_array($function, array($extensions));
            }
          }
        }
        // Parse commit messages for uninstalling modules.
        if (preg_match_all('/uninstall modules?:?(.+)/i', $commit['message'], $matches, PREG_SET_ORDER)) {
          foreach ($matches as $match) {
            $modules = explode(',', str_replace(' ', '', $match[1]));
            if (!empty($modules)) {
              drupal_uninstall_modules($modules);
            }
          }
        }
      }

      // @TODO make this configurable or use contrib module.
      $output = shell_exec('/usr/bin/git pull');
      watchdog('github_webhook', 'Git pull for dreditor.org: <pre><code>!code</code></pre>', array('!code' => $output));

      // Enable modules.
      if (!empty($enable)) {
        foreach ($enable as $function => $modules) {
          call_user_func_array($function, array($modules));
        }
      }

      // Flush all caches.
      drupal_flush_all_caches();
    }
  }
}
