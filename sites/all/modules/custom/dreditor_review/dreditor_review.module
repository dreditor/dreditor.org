<?php
/**
 * @file
 * dreditor_review.module
 */

/**
 * Implements hook_js().
 */
function dreditor_review_js() {
  return array(
    'json' => array(
      'bootstrap'    => DRUPAL_BOOTSTRAP_VARIABLES,
      'callback'     => 'dreditor_review_callback',
      'includes'     => array('path'),
      'dependencies' => array('system', 'cdn'),
      'skip_hook_init' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dreditor_review_menu() {
  $items['js/dreditor_review/json'] = array(
    'title' => 'Profile',
    'description' => 'My Profile',
    'page callback' => 'dreditor_review_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_cron().
 *
 * Delete stale old review files.
 */
function dreditor_review_cron() {
  file_scan_directory('public://review', '/.*/', array('callback' => 'drupal_delete_file_if_stale'));
}

/**
 * Menu callback for 'js/dreditor_review/json'.
 */
function dreditor_review_callback() {
  $dir = 'public://review';
  $json = array();
  $method = $_SERVER['REQUEST_METHOD'];
  $gzip = strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== FALSE;

  // Add necessary headers.
  drupal_add_http_header('Access-Control-Allow-Origin', 'https://drupal.org');
  drupal_add_http_header('Access-Control-Allow-Methods', 'POST,OPTIONS');
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  drupal_add_http_header('Accept', 'application/json');

  // Handle HTTP methods.
  if (!in_array($method, array('POST', 'OPTIONS'))) {
    dreditor_review_http_header(405, $method, $json);
  }
  // Ensure POST method and check for appropriate referrer, if there is one.
  elseif (
    $method === 'POST'
    && (empty($_SERVER['HTTP_REFERER']) || preg_match('/https?\:\/\/([^\.]+[\.])?(drupal|dreditor)\.org/', $_SERVER['HTTP_REFERER']))
  ) {
    // Extract the files from POST data.
    $files = !empty($_POST['files']) ? $_POST['files'] : array();

    // Generate a unique hash for these files.
    $json['id'] = md5(serialize($files));

    // Construct the JSON file uri.
    $json_file = $dir . '/' . $json['id'] . '.json';

    // Determine if a rebuild should happen.
    $rebuild = !empty($_GET['rebuild']) ? TRUE : FALSE;

    $json_updated = FALSE;

    // Load JSON file, if it exists.
    if (!$rebuild && file_exists($json_file)) {
      $json = drupal_json_decode(file_get_contents($json_file));
    }

    // Iterate through each file.
    foreach ($files as $url) {
      $url_info = parse_url($url);
      $path_info = pathinfo($url_info['path']);

      // Ensure provided file is a patch.
      if (!in_array($path_info['extension'], array('patch', 'diff', 'txt'))) {
        continue;
      }

      $filename = $path_info['basename'];
      $patch_file = $dir . '/' . $filename;
      $html_file = $dir . '/' . $filename . '.html';

      if ($rebuild || (empty($json['files'][$filename]) && file_exists($html_file))) {
        file_unmanaged_delete($html_file);
      }

      // Create HTML file for patch, if needed.
      if ($rebuild || !file_exists($html_file)) {
        // Handling files, ensure the directory is prepared.
        file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

        // Download patch file.
        $request = drupal_http_request($url);
        if ($request->code === '200' && $request->headers['content-type'] === 'text/plain; charset=utf-8') {
          file_unmanaged_save_data($request->data, $patch_file, FILE_EXISTS_REPLACE);
        }

        // Parse the patch file into HTML.
        if ($rebuild || empty($json['files'][$filename])) {
          $json['files'][$filename] = array(
            'urls' => array(
              'patch' => file_create_url($url),
              'html' => file_create_url($html_file),
            ),
          );
          $stats = dreditor_review_parse_file($patch_file, $html_file);
          $json['files'][$filename] += $stats;
          // Trigger save after.
          $json_updated = TRUE;
        }

        // Delete original patch file.
        file_unmanaged_delete($patch_file);
      }
    }

    // Create/update JSON file, if needed.
    if ($json_updated) {
      file_put_contents($json_file, drupal_json_encode($json));
    }
    dreditor_review_http_header(200, NULL, $json);
  }
  else {
    dreditor_review_http_header();
  }

  $output = drupal_json_encode($json);

  // GZIP encode output, if browser supports it.
  if ($gzip) {
    $output = gzencode($output, 9);
    drupal_add_http_header('Content-Encoding', 'gzip');
    drupal_add_http_header('Vary', 'Accept-Encoding');
  }

  // Add necessary headers.
  drupal_add_http_header('Content-Length', strlen($output));

  // Print output.
  echo $output;
  exit();
}

/**
 * Helper function for returning error information.
 *
 * @param int $code
 *   The HTTP response code of the error.
 * @param string $message
 *   An additional message to give in addition to the response header.
 * @param array $json
 *   The JSON array object to modify, passed by reference.
 */
function dreditor_review_http_header($code = 500, $message = NULL, array &$json = array()) {
  $codes = array(
    200 => 'OK',
    400 => 'Bad Request',
    405 => 'Method Not Allowed',
    500 => 'Internal Server Error',
  );
  if (!array_key_exists($code, $codes)) {
    $code = 500;
  }
  header('HTTP/1.1 ' . $code . ' ' . $codes[$code], TRUE, $code);
  $json['code'] = $code;
  $json['message'] = $codes[$code] . (!empty($message) ? ': ' . $message : '');
}

/**
 * Parses a patch file into HTML.
 *
 * @param string $source
 *   The URI path of the source.
 * @param string $destination
 *   The URI path of the destination.
 */
function dreditor_review_parse_file($source, $destination) {
  $diff_stats = array(
    'files' => 0,
    'additions' => 0,
    'deletions' => 0,
  );
  if (($sh = @fopen($source, 'r')) && ($dh = @fopen($destination, 'w'))) {
    $in_format_patch = FALSE;
    $in_diff_stats = FALSE;
    $in_code_diff = FALSE;
    $ln1 = 0;
    $ln2 = 0;
    while (($line = fgets($sh, 4096)) !== FALSE) {
      $ln1o = TRUE;
      $ln2o = TRUE;
      $line = htmlentities(rtrim($line), NULL, 'utf-8', FALSE);
      if (preg_match('/^From:? [\da-z]{40}/', $line)) {
        if ($in_diff_stats) {
          fwrite($dh, '</div>' . PHP_EOL);
        }
        elseif ($in_code_diff) {
          fwrite($dh, '  </tbody>' . PHP_EOL);
          fwrite($dh, '</table>' . PHP_EOL);
        }
        fwrite($dh, '<div class="dr dr-fp">' . PHP_EOL);
        $in_format_patch = TRUE;
        $in_diff_stats = FALSE;
        $in_code_diff = FALSE;
      }
      elseif (preg_match('/^diff/', $line)) {
        if ($in_format_patch) {
          fwrite($dh, '</div>' . PHP_EOL);
        }
        elseif ($in_code_diff) {
          fwrite($dh, '  </tbody>' . PHP_EOL);
          fwrite($dh, '</table>' . PHP_EOL);
        }
        fwrite($dh, '<div class="dr dr-stat">' . PHP_EOL);
        fwrite($dh, '  <div>' . $line . '</div>' . PHP_EOL);
        $in_format_patch = FALSE;
        $in_diff_stats = TRUE;
        $in_code_diff = FALSE;
        $diff_stats['files']++;
        continue;
      }
      elseif (preg_match('/^@@/', $line)) {
        if ($in_format_patch || $in_diff_stats) {
          fwrite($dh, '  <div>' . $line . '</div>' . PHP_EOL);
          fwrite($dh, '</div>' . PHP_EOL);
        }
        fwrite($dh, '<table class="dr dr--diff">' . PHP_EOL);
        fwrite($dh, '  <tbody>' . PHP_EOL);
        if (preg_match('/^@@ -([0-9]+),[0-9]+ \+([0-9]+),[0-9]+ @@/', $line, $matches)) {
          $ln1 = $matches[1] - 1;
          $ln2 = $matches[2] - 1;
        }
        $in_format_patch = FALSE;
        $in_diff_stats = FALSE;
        $in_code_diff = TRUE;
        continue;
      }
      if ($in_diff_stats || $in_format_patch) {
        fwrite($dh, '  <div>' . $line . '</div>' . PHP_EOL);
      }
      elseif ($in_code_diff) {
        $row_attributes = array(
          'class' => array(
            'ln',
          ),
        );
        if (preg_match('/^(?!\+\+\+)\+/', $line)) {
          $row_attributes['class'][] = 'ln--a';
          $diff_stats['additions']++;
          if ($ln2) {
            $ln1o = FALSE;
            $ln2++;
          }
        }
        elseif (preg_match('/^((?!\-\-\-$|\-\-$)\-)/', $line)) {
          $row_attributes['class'][] = 'ln--r';
          $diff_stats['deletions']++;
          if ($ln1) {
            $ln2o = FALSE;
            $ln1++;
          }
        }
        else {
          if ($ln1 && $ln1o) {
            $ln1++;
          }
          if ($ln2 && $ln2o) {
            $ln2++;
          }
        }

        if (empty($line)) {
          $row_attributes['class'][] = 'ln--e';
          $line = '&nbsp;';
        }

        fwrite($dh, '    <tr' . drupal_attributes($row_attributes) . '><td class="num">' . ($ln1o ? $ln1 : '') . '</td><td class="num">' . ($ln2o ? $ln2 : '') . '</td><td><span class="pre">' . $line . '</span></td></tr>' . PHP_EOL);
      }
    }
    if ($in_code_diff) {
      fwrite($dh, '  </tbody>' . PHP_EOL);
      fwrite($dh, '</table>' . PHP_EOL);
    }
    fclose($sh);
    fclose($dh);
  }
  return $diff_stats;
}
